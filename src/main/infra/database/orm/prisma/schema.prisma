// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Status_usuarios {
  ATIVO
  INATIVO
}

enum Tipo_usuario {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status_formulario {
  PENDENTE
  ENVIADO
  FALHA
}

model Usuario {
  id               String           @id @default(uuid())
  nome             String           @unique
  email            String           @unique
  senha            String
  tipo             Tipo_usuario
  status           Status_usuarios
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?

  funcionario      Funcionario?
  envia_formulario Envio_formulario[]
}

model Funcionario {
  id               String           @id @default(uuid())
  usuarioId        String           @unique       // garante 1‑para‑1
  usuario          Usuario          @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  cargo            String
  status           Status_usuarios
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
}



model Cliente {
  id               String @id @default(uuid())
  nome             String
  telefone         String
  email            String?
  cidade           String
  status           Status_usuarios
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  produtos         Produto[]
  
  envio_formulario Envio_formulario[]
}

model Produto {
  id               String @id @default(uuid())
  nome             String
  descricao        String
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  cliente_id       String
  cliente         Cliente  @relation(fields: [cliente_id], references: [id])
}

model Pergunta {
  id               String    @id @default(uuid())
  texto            String
  tipo             String
  opcoes           Json?
  ativo            Boolean   @default(true)
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?

  formularios      Formulario[]


  @@map("perguntas")
}


model Envio_formulario {
   
  id                String    @id @default(uuid())
  // Relações que você já tinha, agora padronizadas
  formulario        Formulario @relation(fields: [formularioId], references: [id])
  formularioId      String     @map("formulario_id")

  cliente           Cliente    @relation(fields: [clienteId], references: [id])
  clienteId         String     @map("cliente_id")

  usuario           Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId         String     @map("usuario_id")

  // Campo crucial que conecta ao subdomínio de feedback
  feedbackId        String     @unique @map("feedback_id")

  // Status padronizado usando o enum
  status            Status_formulario @default(PENDENTE)
  
  // Campos de rastreamento do envio
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataEnvio         DateTime? @map("data_envio")
  tentativasEnvio   Int       @default(0) @map("tentativas_envio")
  ultimaMensagemErro String?   @map("ultima_mensagem_erro")

  @@map("envios")

}

model Formulario {
  id               String     @id @default(uuid())
  texto           String
  descricao        String
  ativo            Boolean
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  
  feedbacks        Feedback[]
  envio_formulario Envio_formulario[]
  perguntas        Pergunta[] 

  @@map("formularios")
}

model Feedback {
  id               String     @id @default(uuid())
  resposta         Json
  data_criacao     DateTime @default(now())
  data_exclusao    DateTime?
  formularioId     String
  formulario       Formulario @relation(fields: [formularioId], references: [id], onDelete: Cascade)
}


