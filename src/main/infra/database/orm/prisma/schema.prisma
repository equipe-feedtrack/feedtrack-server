generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum StatusUsuario {
  ATIVO
  INATIVO
}

enum TipoUsuario {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StatusFormulario {
  PENDENTE
  ENVIADO
  FALHA
}

enum TipoCampanha {
  POS_COMPRA
  AUTOMATICO
  PROMOCIONAL
  SATISFACAO
}

enum SegmentoAlvo {
  TODOS_CLIENTES
  CLIENTES_REGULARES
  NOVOS_CLIENTES
  CLIENTES_PREMIUM
}

enum TipoAcao {
  CRIAR_USUARIO
  ATUALIZAR_USUARIO
  CRIAR_CLIENTE
  ATUALIZAR_CLIENTE
  DESATIVAR_CAMPANHA
  INICIAR_ENVIO_CAMPANHA
}

enum EntidadeAlvoTipo {
  USUARIO
  CLIENTE
  CAMPANHA
  FORMULARIO
  PRODUTO
  ENVIO_FORMULARIO
}

enum CanalEnvio {
  EMAIL
  WHATSAPP
}

enum Plano {
  FREE
  BASIC
  PRO
}

enum StatusEmpresa {
  ATIVO
  INATIVO
}



// --- MODELS ---

model Empresa {
  id              String    @id @default(uuid())
  nome            String    @unique
  cnpj            String?   @unique
  email           String?   @unique
  plano           Plano     @default(FREE)
  status          StatusEmpresa @default(ATIVO)


  
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  dataExclusao    DateTime? @map("data_exclusao")

  usuarios     Usuario[]
  funcionarios Funcionario[]
  clientes     Cliente[]
  produtos     Produto[]
  campanhas    Campanha[]
  vendas       Venda[]
  feedbacks    Feedback[]
  formularios  Formulario[]
  perguntas    Pergunta[]
  logs         LogAtividade[]
  envios       EnvioFormulario[]


  @@map("empresas")
}

model Usuario {
  id               String        @id @default(uuid())
  nome_usuario     String        @unique
  senha_hash       String
  email            String?       @unique
  tipo             TipoUsuario
  status           StatusUsuario
  data_criacao     DateTime      @default(now())
  data_atualizacao DateTime      @updatedAt
  data_exclusao    DateTime?

  empresaId        String
  empresa          Empresa       @relation(fields: [empresaId], references: [id])

  funcionario      Funcionario?  @relation("UsuarioFuncionario")
  enviosFormulario EnvioFormulario[]
  logsAtividade    LogAtividade[]

  @@map("usuarios")
}

model Funcionario {
  id              String        @id @default(uuid())
  cargo           String
  dataAdmissao    DateTime?     @default(now()) @map("data_admissao")
  status          StatusUsuario @default(ATIVO)
  dataCriacao     DateTime      @default(now()) @map("data_criacao")
  dataAtualizacao DateTime      @updatedAt @map("data_atualizacao")
  dataExclusao    DateTime?     @map("data_exclusao")

  usuarioId       String        @unique @map("usuario_id")
  usuario         Usuario       @relation("UsuarioFuncionario", fields: [usuarioId], references: [id], onDelete: Cascade)

  empresaId       String
  empresa         Empresa       @relation(fields: [empresaId], references: [id])

  @@map("funcionarios")
}

model LogAtividade {
  id             String   @id @default(uuid())
  acao           TipoAcao
  detalhes       String?
  dataOcorrencia DateTime @default(now()) @map("data_ocorrencia")

  nomeUsuario String      @map("nome_usuario")
  tipoUsuario TipoUsuario @map("tipo_usuario")

  usuario   Usuario @relation(fields: [id], references: [id])
  usuarioId String  @map("usuario_id")

  entidadeAlvoId   String?           @map("entidade_alvo_id")
  entidadeAlvoTipo EntidadeAlvoTipo? @map("entidade_alvo_tipo")

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("logs_atividade")
}

model Cliente {
  id                  String        @id @default(uuid())
  nome                String
  telefone            String?
  email               String?
  cidade              String?
  status              StatusUsuario
  dataCriacao         DateTime      @default(now()) @map("data_criacao")
  dataAtualizacao     DateTime      @updatedAt @map("data_atualizacao")
  dataExclusao        DateTime?     @map("data_exclusao")

  empresaId           String
  empresa             Empresa       @relation(fields: [empresaId], references: [id])

  vendas           Venda[]
  enviosFormulario EnvioFormulario[]

  @@map("clientes")
}

model Produto {
  id              String    @id @default(uuid())
  nome            String
  descricao       String
  valor           Int
  ativo           Boolean   @default(true)
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  dataExclusao    DateTime? @map("data_exclusao")

  empresaId       String
  empresa         Empresa   @relation(fields: [empresaId], references: [id])

  vendas          Venda[]
  enviosFormulario EnvioFormulario[]

  @@map("produtos")
}

model Venda {
  id            String    @id @default(uuid())
  dataVenda     DateTime  @default(now()) @map("data_venda")
  
  clienteId     String
  cliente       Cliente   @relation(fields: [clienteId], references: [id])

  produtoId     String
  produto       Produto   @relation(fields: [produtoId], references: [id])

  empresaId     String
  empresa       Empresa   @relation(fields: [empresaId], references: [id])

  @@map("vendas")
}

model Pergunta {
  id              String    @id @default(uuid())
  texto           String
  tipo            String
  opcoes          Json?
  ativo           Boolean   @default(true)
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  dataExclusao    DateTime? @map("data_exclusao")

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  formularios PerguntasOnFormularios[]

  @@map("perguntas")
}

model Formulario {
  id              String    @id @default(uuid())
  titulo          String
  descricao       String
  ativo           Boolean
  empresaId       String    @map("empresa_id")
  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt @map("data_atualizacao")
  dataExclusao    DateTime? @map("data_exclusao")

  perguntas PerguntasOnFormularios[]
  campanhas Campanha[]
  feedbacks Feedback[]
  envios    EnvioFormulario[]

  empresa   Empresa @relation(fields: [empresaId], references: [id])

  @@map("formularios")
}

model PerguntasOnFormularios {
  id           String     @id @default(uuid())
  pergunta     Pergunta   @relation(fields: [perguntaId], references: [id], onDelete: Cascade)
  perguntaId   String     @map("pergunta_id")
  formulario   Formulario @relation(fields: [formularioId], references: [id], onDelete: Cascade)
  formularioId String     @map("formulario_id")
  ordemNaLista Int        @map("ordem_na_lista")

  @@map("perguntas_on_formularios")
}

model Campanha {
  id               String       @id @default(uuid())
  titulo           String
  descricao        String?
  tipoCampanha     TipoCampanha @map("tipo_campanha")
  segmentoAlvo     SegmentoAlvo @map("segmento_alvo")
  canalEnvio       CanalEnvio   @default(EMAIL) @map("canal_envio")
  dataInicio       DateTime     @map("data_inicio")
  dataFim          DateTime?    @map("data_fim")
  templateMensagem String       @map("template_mensagem")
  ativo            Boolean      @default(true)
  dataCriacao      DateTime     @default(now()) @map("data_criacao")
  dataAtualizacao  DateTime     @updatedAt @map("data_atualizacao")
  dataExclusao     DateTime?    @map("data_exclusao")

  empresaId        String
  empresa          Empresa      @relation(fields: [empresaId], references: [id])

  formulario   Formulario? @relation(fields: [formularioId], references: [id], onDelete: SetNull)
  formularioId String?     @map("formulario_id")

  envios EnvioFormulario[]

  @@map("campanhas")
}

model EnvioFormulario {
  id                 String           @id @default(uuid())
  status             StatusFormulario @default(PENDENTE)
  tentativasEnvio    Int              @default(0) @map("tentativas_envio")
  ultimaMensagemErro String?          @map("ultima_mensagem_erro")
  dataCriacao        DateTime         @default(now()) @map("data_criacao")
  dataEnvio          DateTime?        @map("data_envio")

  formulario   Formulario? @relation(fields: [formularioId], references: [id], onDelete: SetNull)
  formularioId String?     @map("formulario_id")
  cliente      Cliente?    @relation(fields: [clienteId], references: [id], onDelete: SetNull)
  clienteId    String?     @map("cliente_id")
  campanha     Campanha?   @relation(fields: [campanhaId], references: [id], onDelete: SetNull)
  campanhaId   String?     @map("campanha_id")
  usuario      Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    String     @map("usuario_id")
  
  produto      Produto?    @relation(fields: [produtoId], references: [id], onDelete: SetNull)
  produtoId    String?     @map("produto_id")

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  feedback     Feedback?   @relation(name: "EnvioFormularioToFeedback")

  @@map("envios_formulario")
}

model Feedback {
  id               String    @id @default(uuid())
  respostas        Json
  dataCriacao      DateTime  @default(now()) @map("data_criacao")
  dataExclusao     DateTime? @map("data_exclusao")
  cliente_nome     String?
  produto_nome     String?
  funcionario_nome String?

  empresaId       String
  empresa         Empresa   @relation(fields: [empresaId], references: [id])

  formulario   Formulario? @relation(fields: [formularioId], references: [id], onDelete: SetNull)
  formularioId String?     @map("formulario_id")

  envio   EnvioFormulario? @relation(name: "EnvioFormularioToFeedback", fields: [envioId], references: [id], onDelete: SetNull)
  envioId String?          @unique @map("envio_id")

  @@map("feedbacks")
}
