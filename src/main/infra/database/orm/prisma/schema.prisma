// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Status_usuarios {
  ATIVO
  INATIVO
}

enum Tipo_usuario {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status_formulario {
  PENDENTE
  ENVIADO
  FALHA
}

enum Tipo_Campanha {
  POS_COMPRA
  AUTOMATICO
  PROMOCIONAL
  SATISFACAO
}

enum Segmento_Alvo {
  TODOS_CLIENTES
  CLIENTES_REGULARES
  NOVOS_CLIENTES
  CLIENTES_PREMIUM
}

enum Tipo_Acao {
  CRIAR_USUARIO
  ATUALIZAR_USUARIO
  CRIAR_CLIENTE
  ATUALIZAR_CLIENTE
  DESATIVAR_CAMPANHA
  INICIAR_ENVIO_CAMPANHA
  // ... adicione todas as ações necessárias
}

enum Entidade_Alvo_Tipo { 
  USUARIO
  CLIENTE
  CAMPANHA
  FORMULARIO
  PRODUTO
  ENVIO_FORMULARIO
}

model Usuario {
  id               String           @id @default(uuid())
  nome             String           @unique
  email            String           @unique
  senha            String
  tipo             Tipo_usuario
  status           Status_usuarios
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?

  funcionario      Funcionario?
  envia_formulario Envio_formulario[]
  logs_atividade   LogAtividade[]
}

model Funcionario {
  id               String         @id @default(uuid())
  usuarioId        String         @unique // Garante 1-para-1 com Usuario
  usuario          Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade) // Relação
  cargo            String
  data_admissao    DateTime       @map("dataAdmissao") // Mapeia para camelCase no TS
  status           Status_usuarios @default(ATIVO) // Reutiliza status de usuário
  data_criacao     DateTime       @map("dataCriacao")
  data_atualizacao DateTime       @map("dataAtualizacao")
  data_exclusao    DateTime?      @map("dataExclusao")

  @@map("funcionarios") // Nome da tabela
}


model LogAtividade {
  id                 String           @id @default(uuid())
  usuarioId          String           @map("usuarioId") // FK para Usuario
  usuario            Usuario          @relation(fields: [usuarioId], references: [id])
  nome_usuario       String           @map("nomeUsuario") // Denormalizado para facilitar consulta
  tipo_usuario       Tipo_usuario     @map("tipoUsuario") // Enum, reutiliza Tipo_usuario de Usuario
  acao               Tipo_Acao
  entidade_alvo_id   String?          @map("entidadeAlvoId")
  entidade_alvo_tipo Entidade_Alvo_Tipo? @map("entidadeAlvoTipo")
  detalhes           String?          
  data_ocorrencia    DateTime         @map("dataOcorrencia") @default(now())

  @@map("logs_atividade")
}

model Cliente {
  id               String @id @default(uuid())
  nome             String
  telefone         String
  email            String?
  cidade           String
  status           Status_usuarios
  vendedor_responsavel String
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  produtos         Produto[]
  
  envio_formulario Envio_formulario[]
}

model Produto {
  id               String @id @default(uuid())
  nome             String
  descricao        String
  valor            Int
  ativo            Boolean       @default(true)
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  cliente_id       String?
  cliente         Cliente?  @relation(fields: [cliente_id], references: [id])
}

model Pergunta {
  id               String    @id @default(uuid())
  texto            String
  tipo             String
  opcoes           Json?
  ativo            Boolean   @default(true)
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?

  formularios      Formulario[]


  @@map("perguntas")
}

model Formulario {
  id               String     @id @default(uuid())
  texto            String
  descricao        String
  ativo            Boolean
  data_criacao     DateTime
  data_atualizacao DateTime
  data_exclusao    DateTime?
  
  feedbacks        Feedback[]
  envio_formulario Envio_formulario[]
  perguntas        Pergunta[]
  campanhas        Campanha[] 

  @@map("formularios")
}

model Campanha {
  id               String        @id @default(uuid())
  titulo           String
  descricao        String?
  tipo_campanha    Tipo_Campanha @map("tipoCampanha") // Mapeia para snake_case no DB
  segmento_alvo    Segmento_Alvo @map("segmentoAlvo") // Mapeia para snake_case no DB
  data_inicio      DateTime      @map("dataInicio")
  data_fim         DateTime?     @map("dataFim")
  template_mensagem String       @map("templateMensagem")
  ativo            Boolean       @default(true)
  data_criacao     DateTime      @map("dataCriacao")
  data_atualizacao DateTime      @map("dataAtualizacao")
  data_exclusao    DateTime?     @map("dataExclusao")
  formularioId     String        @map("formularioId") // Chave estrangeira para o Formulário


  formulario       Formulario    @relation(fields: [formularioId], references: [id])

  @@map("campanhas") // Nome da tabela no banco
}

model Envio_formulario {
   
  id                String    @id @default(uuid())
  // Relações que você já tinha, agora padronizadas
  formulario        Formulario @relation(fields: [formularioId], references: [id])
  formularioId      String     @map("formulario_id")

  cliente           Cliente    @relation(fields: [clienteId], references: [id])
  clienteId         String     @map("cliente_id")

  usuario           Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId         String     @map("usuario_id")

  // Campo crucial que conecta ao subdomínio de feedback
  feedbackId        String     @unique @map("feedback_id")

  // Status padronizado usando o enum
  status            Status_formulario @default(PENDENTE)
  
  // Campos de rastreamento do envio
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataEnvio         DateTime? @map("data_envio")
  tentativasEnvio   Int       @default(0) @map("tentativas_envio")
  ultimaMensagemErro String?   @map("ultima_mensagem_erro")

  @@map("envios")

}

model Feedback {
  id               String     @id @default(uuid())
  resposta         Json
  data_criacao     DateTime @default(now())
  data_exclusao    DateTime?
  formularioId     String
  formulario       Formulario @relation(fields: [formularioId], references: [id], onDelete: Cascade)
}